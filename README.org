#+TITLE: A generic binary tree in C# 

* Generic Tree Class

A simple generic unbalanced binary tree. 

#+BEGIN_SRC csharp :tangle src/binarytree.cs
using System;
using System.Collections.Generic; 

  public class BinaryTree<T> {

    public BinaryTree<T> left;
    public BinaryTree<T> right;

    public readonly T value;
    Func<T, T, int> comparer; 

    public BinaryTree(T value, Func<T, T, int> comparer) {
      this.value = value;
      this.comparer = comparer;
      left = null;
      right = null;
    }

    public BinaryTree(T value) : this(value, (x,y) => Comparer<T>.Default.Compare(x,y)) { }

    public void Insert(T value) {
      if (comparer(value, this.value) < 0)
      {
        if (left == null) left = new BinaryTree<T>(value, comparer);
        else left.Insert(value);
      }
      else  if (right == null)
        right = new BinaryTree<T>(value, comparer);
      else right.Insert(value);
    }

    public void Insert(params T[] values) {
      foreach(T value in values) Insert(value);
    }

    override public string ToString()
    {
      string s = "";
      if (left != null)  s += left.ToString();
      s += string.Format("{0};", value);
      if (right != null) s += right.ToString();
      return s;
    }
  }
#+END_SRC


* Demo 

** Tree Insertion and LMR-Traversion 

#+BEGIN_SRC csharp :tangle demo/treetest1.cs 
using System; 

class TreeTest {

  public static void Main()
  {
    BinaryTree<int> root = new BinaryTree<int>(5); 
    root.Insert(3);
    root.Insert(7);
    root.Insert(1);
    root.Insert(4);
    root.Insert(6);
    root.Insert(2);  
    Console.WriteLine(root);

    BinaryTree<float> floattree = new BinaryTree<float>(3.14f); 
    floattree.Insert(0.99f, 2.34f, 3.1415f);
    Console.WriteLine(floattree);

    BinaryTree<string> lannisters = new BinaryTree<string>("Tywin");
    lannisters.Insert("Cersei","Tyrion","Joffrey");
    lannisters.Insert("Tommen");
    lannisters.Insert("Myrcella");
    lannisters.Insert("Jamie");
    Console.WriteLine(lannisters);
  }
}
#+END_SRC

#+BEGIN_SRC sh :results output :exports both
mcs demo/treetest1.cs src/binarytree.cs
mono demo/treetest1.exe
#+END_SRC

#+RESULTS:
: 1;2;3;4;5;6;7;
: 0,99;2,34;3,14;3,1415;
: Cersei;Jamie;Joffrey;Myrcella;Tommen;Tyrion;Tywin;

** Graphviz-Output
   CLOSED: [2016-05-26 Do 17:01]

#+BEGIN_SRC csharp :tangle src/binarytreeextensions.cs
using System; 

public static class BinaryTreeExtensions {

  private static void PrintNode<T>(T rootValue, T childValue) {
    Console.WriteLine("  \"{0}\" -> \"{1}\"", rootValue, childValue);
  }

  private static void PrintNode<T>(T value, int empties) {
    Console.WriteLine("  empty{0} [label=\"\", style=invis];", empties);
    Console.WriteLine("  \"{0}\" -> empty{1}", value,  empties);
  }

  private static void PrintSubTree<T>(BinaryTree<T> tree, ref int empties) {

    if (tree.left != null || tree.right != null)
      Console.WriteLine("  \"{0}\" [shape=circle];", tree.value);

    if (tree.left != null) {
      PrintNode(tree.value, tree.left.value);
      PrintSubTree(tree.left, ref empties);
    } else  if (tree.right != null) {
      PrintNode(tree.value, empties++);
    }
    
    if (tree.right != null) {
      PrintNode(tree.value, tree.right.value);
      PrintSubTree(tree.right, ref empties);
    } else if (tree.left != null) {
      PrintNode(tree.value, empties++);
    }
  }

  public static void PrintDot<T>(this BinaryTree<T> tree) {
    Console.WriteLine("digraph G {");
    Console.WriteLine("  node[shape=rectangle];");
    int empties = 0;
    PrintSubTree(tree, ref empties); 
    Console.WriteLine("}"); 
  }
}
#+END_SRC

Call extension method ~PrintDot~ and feed the results into [[http://www.graphviz.org/][Graphviz]]: 

#+BEGIN_SRC csharp :tangle demo/treetest2.cs 
class TreeTest {
  public static void Main() {
    BinaryTree<int> root = new BinaryTree<int>(5); 
    root.Insert(3,7,1,4,6,2);
    root.PrintDot(); 
  }
}
#+END_SRC

#+BEGIN_SRC sh :results verbatim :wrap "SRC dot :file images/tree1.png" :exports both
mcs demo/treetest2.cs src/binarytree.cs src/binarytreeextensions.cs 
mono demo/treetest2.exe 
#+END_SRC

#+RESULTS:
#+BEGIN_SRC dot :file images/tree1.png
digraph G {
  node[shape=rectangle];
  "5" [shape=circle];
  "5" -> "3"
  "3" [shape=circle];
  "3" -> "1"
  "1" [shape=circle];
  empty0 [label="", style=invis];
  "1" -> empty0
  "1" -> "2"
  "3" -> "4"
  "5" -> "7"
  "7" [shape=circle];
  "7" -> "6"
  empty1 [label="", style=invis];
  "7" -> empty1
}
#+END_SRC

#+RESULTS:
[[file:images/tree1.png]]

Another Example: 

#+BEGIN_SRC csharp :tangle demo/treetest3.cs 
using System; 

class TreeTest {

  public static void Main() {
    BinaryTree<string> lannisters = new BinaryTree<string>("Tywin");
    lannisters.Insert("Cersei");
    lannisters.Insert("Tyrion");
    lannisters.Insert("Joffrey");
    lannisters.Insert("Tommen");
    lannisters.Insert("Myrcella");
    lannisters.Insert("Jamie");
    lannisters.PrintDot();
  }
}
#+END_SRC

#+BEGIN_SRC sh :results verbatim :wrap "SRC dot :file images/tree2.png" :exports both
mcs demo/treetest3.cs src/binarytree.cs src/binarytreeextensions.cs 
mono demo/treetest3.exe 
#+END_SRC

#+RESULTS:
#+BEGIN_SRC dot :file images/tree2.png
digraph G {
  node[shape=rectangle];
  "Tywin" [shape=circle];
  "Tywin" -> "Cersei"
  "Cersei" [shape=circle];
  empty0 [label="", style=invis];
  "Cersei" -> empty0
  "Cersei" -> "Tyrion"
  "Tyrion" [shape=circle];
  "Tyrion" -> "Joffrey"
  "Joffrey" [shape=circle];
  "Joffrey" -> "Jamie"
  "Joffrey" -> "Tommen"
  "Tommen" [shape=circle];
  "Tommen" -> "Myrcella"
  empty1 [label="", style=invis];
  "Tommen" -> empty1
  empty2 [label="", style=invis];
  "Tyrion" -> empty2
  empty3 [label="", style=invis];
  "Tywin" -> empty3
}
#+END_SRC

#+RESULTS:
[[file:images/tree2.png]]


** Application: Huffman-Encoding 
   CLOSED: [2016-05-26 Do 17:04]

#+BEGIN_SRC csharp  :tangle demo/huffman.cs
using System;
using System.Collections.Generic; 
using System.Linq; 

class PriorityQueue<T> { // A poor man's priority queue... 

  List<T> list;
  Func<T, T, int> comparer; 

  public PriorityQueue(Func<T, T, int> comparer) {
    this.comparer = comparer;
    list = new List<T>();
  }

  public T Dequeue() {
    var element = list[0];
    list.RemoveAt(0);
    return element; 
  }

  public void Enqueue(T element) { 
    list.Add(element);
    list.Sort((x,y) => comparer(x,y)); 
  } 

  public int Count() {
    return list.Count();
  }
}

class StringHistogram {

  public Dictionary<int, int> dict; 

  public StringHistogram(string str) {
    dict = new Dictionary<int, int>(); 
    foreach(var c in str.ToCharArray()) {
      dict[c] = dict.ContainsKey(c) ? dict[c]+1 : 1; 
    }
  }

  override public string ToString() {
    string s=""; 
    foreach(var entry in dict) {
      s+= string.Format("{0}|{1}\n", (char)entry.Key, entry.Value);
    }
    return s;
  }
}

class Huffman {

  public static void Main() {
  //  StringHistogram hist = new StringHistogram("Hello World!")
   StringHistogram hist = new StringHistogram("a fast runner need never be afraid of the dark"); 

   Func<KeyValuePair<string,int>, KeyValuePair<string,int>, int> comparer = (x,y) => x.Value - y.Value; 
   PriorityQueue<BinaryTree<KeyValuePair<string,int>>> PQ = new PriorityQueue<BinaryTree<KeyValuePair<string,int>>>((x,y) => comparer(x.value, y.value));
   foreach(var element in hist.dict) {
      PQ.Enqueue(new BinaryTree<KeyValuePair<string,int>>(new KeyValuePair<string, int>(((char)element.Key).ToString(),element.Value) ,comparer));
    }

    while (PQ.Count() > 1) {
      var T1 = PQ.Dequeue();
      var T2 = PQ.Dequeue();
      var newRoot = new BinaryTree<KeyValuePair<string, int>>(new KeyValuePair<string, int>(T1.value.Key + T2.value.Key, T1.value.Value+T2.value.Value) , comparer);
      newRoot.left = T1;
      newRoot.right= T2;
      PQ.Enqueue(newRoot);
    }
    PQ.Dequeue().PrintDot();
  }
}
#+END_SRC

#+BEGIN_SRC sh :results verbatim :wrap "SRC dot :file images/tree3.png" :exports both
mcs demo/huffman.cs src/binarytree.cs src/binarytreeextensions.cs
mono demo/huffman.exe 
#+END_SRC

#+RESULTS:
#+BEGIN_SRC dot :file images/tree3.png
digraph G {
  node[shape=rectangle];
  "[ skdarefuvihnobt, 46]" [shape=circle];
  "[ skdarefuvihnobt, 46]" -> "[ skda, 19]"
  "[ skda, 19]" [shape=circle];
  "[ skda, 19]" -> "[ , 9]"
  "[ skda, 19]" -> "[skda, 10]"
  "[skda, 10]" [shape=circle];
  "[skda, 10]" -> "[skd, 5]"
  "[skd, 5]" [shape=circle];
  "[skd, 5]" -> "[sk, 2]"
  "[sk, 2]" [shape=circle];
  "[sk, 2]" -> "[s, 1]"
  "[sk, 2]" -> "[k, 1]"
  "[skd, 5]" -> "[d, 3]"
  "[skda, 10]" -> "[a, 5]"
  "[ skdarefuvihnobt, 46]" -> "[refuvihnobt, 27]"
  "[refuvihnobt, 27]" [shape=circle];
  "[refuvihnobt, 27]" -> "[re, 12]"
  "[re, 12]" [shape=circle];
  "[re, 12]" -> "[r, 5]"
  "[re, 12]" -> "[e, 7]"
  "[refuvihnobt, 27]" -> "[fuvihnobt, 15]"
  "[fuvihnobt, 15]" [shape=circle];
  "[fuvihnobt, 15]" -> "[fuvih, 7]"
  "[fuvih, 7]" [shape=circle];
  "[fuvih, 7]" -> "[f, 3]"
  "[fuvih, 7]" -> "[uvih, 4]"
  "[uvih, 4]" [shape=circle];
  "[uvih, 4]" -> "[uv, 2]"
  "[uv, 2]" [shape=circle];
  "[uv, 2]" -> "[u, 1]"
  "[uv, 2]" -> "[v, 1]"
  "[uvih, 4]" -> "[ih, 2]"
  "[ih, 2]" [shape=circle];
  "[ih, 2]" -> "[i, 1]"
  "[ih, 2]" -> "[h, 1]"
  "[fuvihnobt, 15]" -> "[nobt, 8]"
  "[nobt, 8]" [shape=circle];
  "[nobt, 8]" -> "[n, 4]"
  "[nobt, 8]" -> "[obt, 4]"
  "[obt, 4]" [shape=circle];
  "[obt, 4]" -> "[ob, 2]"
  "[ob, 2]" [shape=circle];
  "[ob, 2]" -> "[o, 1]"
  "[ob, 2]" -> "[b, 1]"
  "[obt, 4]" -> "[t, 2]"
}
#+END_SRC

#+RESULTS:
[[file:images/tree3.png]]

